const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, StringSelectMenuOptionBuilder, StringSelectMenuBuilder } = require("discord.js");
const { Party } = require("../../helper/models/PartyClass");
const { useCommand } = require("../../../backend/misc/active_users");
const { getUser } = require("../../../backend/firestore/utility/get_user");
const { promoteUnits } = require("../../../backend/firestore/utility/promote_unit");

module.exports = {
	data: new SlashCommandBuilder()
		.setName('partyold1')
		.setDescription('Check your party and morale.'),
	async execute(interaction) {
        let { user, userData } = await useCommand(interaction, true); if (userData.closeCommand) return;

        let firstOpen = true;

        await partyFunction();
        async function partyFunction(partyDesc) {
        console.log('START FUNC')
        userData = await getUser(user);
        if (!userData) userData = await getUser(user); // TEMP BUG FIX
        
        let unitString = ' ';

        const party = new Party(userData);

            const noParty = party.length() === 0 ? true : false;

            if (noParty) {
              unitString = 'You have no party members!'
            }
            else {
                party.textSummary().forEach(unit => {
                    unitString += `${unit}\n`
                })
            }

            const partySelect = new StringSelectMenuBuilder()
        .setCustomId('unit')
        .setPlaceholder('No Unit Selected')

        const shortList = party.shortList();
        Object.keys(shortList).forEach(unit => {
            partySelect.addOptions(
                new StringSelectMenuOptionBuilder()
                    .setLabel(`${shortList[unit].name}`)
                    .setDescription(`Amount: [${shortList[unit].amt}] Promotions: [${shortList[unit].promos}] Rank: [${shortList[unit].rank}] Class: [${shortList[unit].class}]`)
                    .setValue(`${shortList[unit].type}`)
            )
        })

        const partySelectRow = new ActionRowBuilder()
        .addComponents(
            partySelect
        )
    
            const partyEmbed = new EmbedBuilder()
                .setTitle(`${user.username}'s party`)
                .setDescription(`Morale: ${userData.stats.morale}\nParty Size: ${party.length()}/${party.maxSize()} units`)
                .addFields({name: `${unitString}`, value:' '})
    
            const partyMsg = new EmbedBuilder()
                .setTitle(`${partyDesc}`)
    
            // Party Editing Buttons
            // promotion
            // const promoteOne = new ButtonBuilder()
            const promoteSelected = new ButtonBuilder()
                .setCustomId('promoGroup')
                .setLabel('Promote Units')
                .setStyle(ButtonStyle.Success)
            const promoteAll = new ButtonBuilder()
                .setCustomId('promoParty')
                .setLabel('Promote All Units')
                .setStyle(ButtonStyle.Success)
                .setDisabled(true)
            // dismiss
            const dismissOne = new ButtonBuilder()
                .setCustomId('dismissOne')
                .setLabel('Dismiss 1 Unit')
                .setStyle(ButtonStyle.Danger)
                .setDisabled(true)
            const dismissSelected = new ButtonBuilder()
                .setCustomId('dismissGroup')
                .setLabel('Dismiss Units')
                .setStyle(ButtonStyle.Danger)
            const disbandParty = new ButtonBuilder()
                .setCustomId('disbandParty')
                .setLabel('Disband Party')
                .setStyle(ButtonStyle.Secondary)
    
            const promoRow = new ActionRowBuilder()
                .addComponents(
                    //promoteOne,
                    promoteSelected,
                    promoteAll
                )
    
            const dismissRow = new ActionRowBuilder()
                .addComponents(
                    dismissOne,
                    dismissSelected
                )
    
            const disbandRow = new ActionRowBuilder()
                .addComponents(
                    disbandParty
                )
    
            let message;
    
            if(firstOpen) {
                firstOpen = false;
                message = await interaction.reply({
                    embeds: [partyEmbed],
                    components: [partySelectRow, promoRow, dismissRow, disbandRow]
                });
            }
            else {
                message = await interaction.editReply({
                    content: '',
                    embeds: [partyMsg, partyEmbed],
                    components: [partySelectRow, promoRow, dismissRow, disbandRow]
                });
            }

            const partyFilter = i => {
                return i.user.id === user.id;
            }

            const partyCollector = message.createMessageComponentCollector({
                filter: partyFilter,
                time: 60000
            })

            let unitChoice = null;
            let collectorState = null;
            let maxPromotion = 0;
            let promoGroupEmbed = new EmbedBuilder();
            let promoOptionsRow = new ActionRowBuilder();
            let active = null;
            let promoChoices = [];
            let promoTypes = [];
            let firstPromo = true;
            let promoMsg = ' ';
            let promoMsgNameHolder = '';
            let promoCounter = 0;
            partyCollector.on('collect', async i => {
                let intType = i.customId !== 'unit'
                ? 'button'
                : 'selectMenu';

                if (intType === 'selectMenu') {
                    unitChoice = i.values[0];
                    i.deferUpdate();
                    //partyCollector.stop('Unit Type Selected');
                    //return;
                }

                collectorState = i.customId;

                if (!unitChoice && collectorState !== 'promoParty' && collectorState !== 'disbandParty') {
                    i.update('Loading...')
                    partyFunction('You must select a unit first!');
                    collectorState = null;
                    partyCollector.stop('No Unit Type Selected');
                    return;
                }

                const promote = async (typeData) => {
                    promoGroupEmbed
                        .setTitle(`Select a promotion for each [${typeData.name}].`)
                        .setDescription(`Auto promote will use the [${typeData.class}] tree for all remaining units.`)

                    const autoPromote = new ButtonBuilder()
                        .setCustomId('auto')
                        .setLabel('Auto')
                        .setStyle(ButtonStyle.Primary)

                    const promoButtons = [];
                    if(firstPromo) {
                        firstPromo = false;
                        console.log('typeData')
                        console.log(typeData)
                        promoCounter = typeData.promos;
                        promoTypes = await party.getPromoTypes(typeData);
                        promoTypes.forEach(option => {
                            promoButtons.push(
                                new ButtonBuilder()
                                    .setCustomId(`${option.id}`)
                                    .setLabel(`${option.name}`)
                                    .setStyle(ButtonStyle.Success)
                            )
                        })
    
                        promoButtons.push(autoPromote);
    
                        promoOptionsRow
                            .addComponents(
                                promoButtons
                            )
                    }
                    promoCounter--;

                }

                if (collectorState === 'promoGroup' || active === 'promoGroup') {
                    active = 'promoGroup';
                    // collectorState is set to any button clicks and select menu, it has multiple jobs
                    // active var is real check for what to do on second, third, etc runs
                    if(collectorState !== 'promoGroup') {
                        promoChoices.push(collectorState);
                    }

                    if (promoCounter === 0 && !firstPromo) {
                        i.update('Loading...');
                        await promoteUnit(user, party.list(), unitChoice, promoChoices);
                        partyFunction('You cannot promote any more of that unit, train your units!');
                        collectorState = null;
                        partyCollector.stop('Units Promoted');
                        return;
                    }
                    const unitType = Object.keys(party.shortList()).find(unitType => unitType === unitChoice);

                    await promote(shortList[unitType]);
                    i.update({
                        content: promoMsg,
                        embeds: [promoGroupEmbed],
                        components: [promoOptionsRow]
                    });
                    promoMsg = `${shortList[unitType].name} has been promoted to I2 ${promoChoices[promoChoices.length - 1]}`;
                }

            })

            partyCollector.on('collected', async (collected, reason) => {

            })
            
        }
    }
}